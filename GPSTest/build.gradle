import groovy.swing.SwingBuilder

apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 28
        versionName "3.0.3"

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    // http://stackoverflow.com/questions/20673625/gradle-0-7-0-duplicate-files-during-packaging-of-apk
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    if (project.hasProperty("secure.properties")
            && new File(project.property("secure.properties")).exists()) {

        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property("secure.properties"))))

        signingConfigs {
            debug {
                storeFile file("gpstest.debug.keystore")
            }

            release {
                storeFile file(props['key.store'])
                keyAlias props['key.alias']
                storePassword "askmelater"
                keyPassword "askmelater"
            }
        }
    } else {
        signingConfigs {
            debug {
                storeFile file("gpstest.debug.keystore")
            }

            release {
                // Nothing here
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            signingConfig signingConfigs.release
        }
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
    }
}

/**
 * Ask for keystore/key passwords on the command line or popup UI when running release builds
 */
task askForPasswords << {
    def console = System.console()
    def storePw
    def keyPw

    if (console) {
        // Must create String because System.readPassword() returns char[]
        // (and assigning that below fails silently)
        storePw = new String(console.readPassword("\nKeystore password: "))
        keyPw = new String(console.readPassword("Key password: "))
    } else {
        // Gradle is running as a daemon - prompt user to enter passwords via popup UI (#87)
        new SwingBuilder().edt {
            dialog(modal: true, title: 'Enter credentials', alwaysOnTop: true, resizable: true,
                    locationRelativeTo: null, pack: true, show: true
            ) {
                vbox {
                    label(text: "Keystore passphrase:")
                    textField id: "storeText", input = passwordField()
                    label(text: "Key passphrase:")
                    textField id: "keyText", input = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        storePw = storeText.text;
                        keyPw = keyText.text;
                        dispose();
                    })
                }
            }
        }
    }

    android.signingConfigs.release.storePassword = storePw
    android.signingConfigs.release.keyPassword = keyPw
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageRelease")) {
        theTask.dependsOn "askForPasswords"
    }
}

dependencies {
    implementation 'com.google.android.gms:play-services-maps:11.8.0'
    implementation ("com.android.support:appcompat-v7:27.1.1")  {
        force = true
    }
    implementation ("com.android.support:design:27.1.1") {
        force = true
    }
    implementation ("com.android.support:recyclerview-v7:27.1.1") {
        force = true
    }
    implementation ("com.android.support:cardview-v7:27.1.1") {
        force = true
    }
    // Calculating offset for camera target in map view
    implementation 'com.google.maps.android:android-maps-utils:0.4.4'
    // Unit tests
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestUtil 'com.android.support.test:orchestrator:1.0.2'
}

// Dependencies not directly used in this project, but used by dependencies that we are using
configurations.all {
    // Needed to eliminate conflict with com.android.support:support-annotations in com.android.support.test
    resolutionStrategy.force "com.android.support:support-annotations:27.1.1"
}